const { GoogleGenerativeAI } = require('@google/generative-ai');
const logger = require('../utils/logger');

let genAI = null;
let model = null;

if (process.env.GEMINI_API_KEY) {
  genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
  model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });
}

const analyzeTicketWithAI = async ({ title, description, priority, type }) => {
  logger.info(`AI answering: "${title}"`);

  let response = '';

  // Try real AI first with CLEAN prompt (no template instructions)
  if (model) {
    try {
      const prompt = `You are a technical expert assistant. A user asked: "${title}"
${description ? `Detailed description: "${description}"` : ''}

Answer their question focusing on their detailed description if provided. Use this structure:

1. Start with a 150-word technical explanation of their question
2. Add "Key Points:" section with 4 bullet points of specific solutions
3. Add a 150-250 word detailed technical section with examples and steps
4. Add "Resources:" section with 3 helpful links with descriptions
5. End with "*This response was generated by our AI assistant to provide immediate help."

Make your response technical, specific, and practical. Don't include any instruction text in your response.`;

      const result = await model.generateContent(prompt);
      let rawResponse = result.response.text().trim();

      // Clean any template text that might slip through
      response = rawResponse
        .replace(/\[Write.*?\]/g, '') // Remove [Write...] instructions
        .replace(/Write \d+-\d+ words.*?\./g, '') // Remove "Write 200-300 words..."
        .replace(/Include practical.*?\./g, '') // Remove instruction fragments
        .replace(/\n\s*\n\s*\n/g, '\n\n') // Clean up extra newlines
        .trim();

      console.log(
        'ðŸ¤– AI Response Generated (cleaned):',
        response.substring(0, 100) + '...'
      );
    } catch (error) {
      console.log('AI failed, using description-focused fallback');
    }
  }

  // Smart contextual fallback that prioritizes description
  if (!response) {
    response = generateDescriptionFocusedAnswer(title, description);
  }

  return {
    requiredSkills: ['general-support'],
    priority,
    aiNotes: response,
    aiResponse: response,
    estimatedResolutionTime: 24,
    category: type,
    urgencyIndicators: [],
    suggestedActions: [],
    confidenceScore: 0.85,
  };
};

// Keep all your existing functions exactly the same
function generateDescriptionFocusedAnswer(title, description) {
  // ... (keep your existing function)
}

function generateDatabaseAnswer(mainContent) {
  // ... (keep your existing function)
}

function generateAPIAnswer(mainContent) {
  // ... (keep your existing function)
}

function generateDescriptionBasedAnswer(mainContent, title) {
  // ... (keep your existing function)
}

function extractMainConcept(content) {
  // ... (keep your existing function)
}

module.exports = { analyzeTicketWithAI };
